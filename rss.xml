<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Your Site's RSS Feed]]></title><description><![CDATA[Do infinite things with Grafana. Turn any website into beautiful grafana dashboards. Supports HTML, CSV, JSON, XML & GraphQL documents.]]></description><link>https://yesoreyeram.github.io/grafana-infinity-datasource</link><generator>GatsbyJS</generator><lastBuildDate>Mon, 15 May 2023 19:38:05 GMT</lastBuildDate><item><title><![CDATA[AWS Status feeds as Grafana annotations]]></title><description><![CDATA[AWS Status Feeds in Grafana In this example, we are going to see how we can use AWS status feeds as Grafana annotations. This will be useful…]]></description><link>https://yesoreyeram.github.io/grafana-infinity-datasource/blog/aws-status-feeds</link><guid isPermaLink="false">https://yesoreyeram.github.io/grafana-infinity-datasource/blog/aws-status-feeds</guid><pubDate>Fri, 28 Jan 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;AWS Status Feeds in Grafana&lt;/h2&gt;
&lt;p&gt;In this example, we are going to see how we can use AWS status feeds as Grafana annotations. This will be useful when you are dealing with any AWS outages. For this, we are going to use the &lt;a href=&quot;https://status.aws.amazon.com/rss/all.rss&quot;&gt;AWS RSS feed&lt;/a&gt;. You can find more feeds at &lt;a href=&quot;https://status.aws.amazon.com/&quot;&gt;AWS Status page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/151575227-20088546-4368-4066-a91b-64058982544b.png#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Connection setup&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://status.aws.amazon.com/rss/all.rss&quot;&gt;AWS status feeds&lt;/a&gt; are open and no authentication required. So, you can simple create a datasource using infinity without any additional configuration.&lt;/p&gt;
&lt;h2&gt;Annotation setup&lt;/h2&gt;
&lt;p&gt;In your dashboard, Once you create a annotation you will perform the following steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a annotation and select your Infinity datasource&lt;/li&gt;
&lt;li&gt;Select &quot;XML&quot; as query type, &quot;URL&quot; as source and Format &quot;Data Frame&quot;&lt;/li&gt;
&lt;li&gt;Provide &lt;code&gt;https://status.aws.amazon.com/rss/all.rss&lt;/code&gt; as the URL&lt;/li&gt;
&lt;li&gt;You need to specify &lt;code&gt;rss.channel[0].item&lt;/code&gt; as the URL. ( You can find this path from the original rss feed )&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt; as columns and provide string type&lt;/li&gt;
&lt;li&gt;Create &lt;code&gt;pubDate&lt;/code&gt; column and mark this as &apos;DateTime&apos;&lt;/li&gt;
&lt;li&gt;Finally select &lt;code&gt;guid[0]._&lt;/code&gt; as string. This is your link. So you can alias this to link&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/151575928-4fc9f188-7f9a-43c5-a92a-6069fe434e6a.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Reference feed item is given below&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;xml&quot; terminal=&quot;carbon&quot; theme=&quot;vscode&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;&amp;lt;item&amp;gt;
    &amp;lt;title&amp;gt;&amp;lt;![CDATA[Service is operating normally: [RESOLVED] SMS Delivery Delays]]&amp;gt;&amp;lt;/title&amp;gt;
    &amp;lt;link&amp;gt;http://status.aws.amazon.com/&amp;lt;/link&amp;gt;
    &amp;lt;pubDate&amp;gt;Fri, 14 Jan 2022 14:44:00 PST&amp;lt;/pubDate&amp;gt;
    &amp;lt;guid isPermaLink=&amp;quot;false&amp;quot;&amp;gt;http://status.aws.amazon.com/#sns-us-east-1_1642200240&amp;lt;/guid&amp;gt;
    &amp;lt;description&amp;gt;&amp;lt;![CDATA[Between 5:14 AM and 11:38 AM PST, we experienced increased delivery latency while delivering SMS messages using US toll-free numbers. Also starting at 5:14 AM, SMS message delivery receipts were delayed, which created a backlog of undelivered delivery receipts. We are continuing to work with our downstream partners to clear this backlog. Receipts for new SMS deliveries will also be delayed until this backlog clears. The issues have been resolved and the service is operating normally.]]&amp;gt;&amp;lt;/description&amp;gt;
    &amp;lt;/item&amp;gt;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2&gt;Table view of status items&lt;/h2&gt;
&lt;p&gt;You can follow the same query procedure in your table panel to get the results as Table&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/151576874-6f4d73d2-9331-4473-a7aa-a3eae0bec880.png#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Alternate query method&lt;/h2&gt;
&lt;p&gt;If you are familiar with &lt;a href=&quot;/grafana-infinity-datasource/wiki/uql&quot;&gt;UQL query&lt;/a&gt;, you can achieve this with a simple query. Instead of selecting &quot;XML&quot; as your query type, you will choose &quot;UQL&quot; in this method and write the following UQL query.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/151577609-d2e5a7c3-aaf8-412b-83b8-965ca676eef4.png#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;sql&quot; terminal=&quot;carbon&quot; theme=&quot;vscode&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;parse-xml
| scope &amp;quot;rss.channel.item&amp;quot;
| extend &amp;quot;published date&amp;quot;=todatetime(&amp;quot;pubDate&amp;quot;)
| project &amp;quot;title&amp;quot;, &amp;quot;published date&amp;quot;, &amp;quot;description&amp;quot;, &amp;quot;link&amp;quot;&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2&gt;More status feeds&lt;/h2&gt;
&lt;p&gt;With this approach, Not only AWS status feed but you can monitor any RSS feeds also.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Thingspeak]]></title><description><![CDATA[Connecting Grafana with Thingspeak API In this example, we are going to visualize data from ThingSpeak API. For demo purpose, I am using…]]></description><link>https://yesoreyeram.github.io/grafana-infinity-datasource/blog/thingspeak</link><guid isPermaLink="false">https://yesoreyeram.github.io/grafana-infinity-datasource/blog/thingspeak</guid><pubDate>Fri, 28 Jan 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Connecting Grafana with Thingspeak API&lt;/h2&gt;
&lt;p&gt;In this example, we are going to visualize data from ThingSpeak API.&lt;/p&gt;
&lt;p&gt;For demo purpose, I am using &lt;a href=&quot;https://thingspeak.com/channels/38629&quot;&gt;traffic monitor public channel&lt;/a&gt; ( Channel ID : 38629 ). You may know already that, ThingSpeak APIs available in different formats such as JSON, CSV and XML. We are going to see how to use all of those different API formats.&lt;/p&gt;
&lt;h2&gt;JSON Example&lt;/h2&gt;
&lt;p&gt;As you can see in the below picture, I am using the &lt;a href=&quot;https://thingspeak.com/channels/38629/feed.json&quot;&gt;JSON feed url&lt;/a&gt; of the channel. If you look at the JSON schema, my data points are under the node called &lt;code&gt;feeds&lt;/code&gt;. So I specify the same as my &lt;code&gt;Rows/Root&lt;/code&gt; selector. Then for the columns, we need to first specify our time column which is &lt;code&gt;created_at&lt;/code&gt; field in our json feed. Then we can specify one or more metrics(number) fields as shown in the below picture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/108479371-9030bb00-728d-11eb-8ae5-f186c78db64e.png#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2&gt;CSV Example&lt;/h2&gt;
&lt;p&gt;If you prefer CSV format over JSON, here is the example settings of the same channel. I am using &lt;a href=&quot;https://thingspeak.com/channels/38629/feed.csv&quot;&gt;CSV feed url&lt;/a&gt; of the channel. In the query, Choose &lt;code&gt;CSV&lt;/code&gt; as your type, specify the csv feed URL and then the fields you needed along with time field.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/108479976-4b595400-728e-11eb-868e-b2d550f496f3.png#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2&gt;XML Example&lt;/h2&gt;
&lt;p&gt;You are not limited to CSV, JSON. You can also use xml format as well in your query if your prefer that. I am using &lt;a href=&quot;https://thingspeak.com/channels/38629/feed.xml&quot;&gt;XML feed url&lt;/a&gt; of the channel. Query setup is almost same as csv/json. Notable configurations are your rows/root field and timestamp field. As you see in the below picture, I am using &lt;code&gt;channel.feeds[0].feed&lt;/code&gt; as my root/rows selector and then for selecting timestamp, I use &lt;code&gt;created-at[0]._&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/108480329-b99e1680-728e-11eb-91f3-38c5585477e2.png#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Using Grafana&apos;s time filter&lt;/h2&gt;
&lt;p&gt;Once you setup the query, you may find that your are always querying recent data in the graphs irrespective of the time range chosen in Grafana. To solve this issue, we need to pass the Grafana&apos;s dynamic time range in the url. As per the &lt;a href=&quot;https://community.thingspeak.com/documentation%20.../api/&quot;&gt;ThingSpeak API specification&lt;/a&gt;, you need to pass the start and end time to the url as query string params. To do that, I am appending &lt;code&gt;?start=${__from:date:YYYY-MM-DD HH:NN:SS}&amp;#x26;end=${__to:date:YYYY-MM-DD HH:NN:SS}&lt;/code&gt; to the url. You can use any variable as specified in the &lt;a href=&quot;https://grafana.com/docs/grafana/latest/variables/variable-types/global-variables/&quot;&gt;grafana doc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My full url now becomes &lt;code&gt;https://thingspeak.com/channels/38629/feed.json?start=${__from:date:YYYY-MM-DD HH:NN:SS}&amp;#x26;end=${__to:date:YYYY-MM-DD HH:NN:SS}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/108482298-392ce500-7291-11eb-9137-888fc4b3515b.png#center#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Long time range&lt;/h2&gt;
&lt;p&gt;Typically for up to 2 hour you can get all the metrics without any aggregation. If you are looking for more long time range, you may need to pass aggregation filter to your url. Here in the below example, I am looking for data worth of recent 180days. So i am pulling the aggregated data using the url &lt;code&gt;https://thingspeak.com/channels/38629/feed.json?start=${__from:date:YYYY-MM-DD HH:NN:SS}&amp;#x26;end=${__to:date:YYYY-MM-DD HH:NN:SS}&amp;#x26;average=1440&lt;/code&gt; the key to look at here is &lt;strong&gt;average=1440&lt;/strong&gt; where it specify to take average of each 1440 minutes/1day. You can specify more granular time aggregation. As per the document, 10, 15, 20, 30, 60, 240, 720, 1440 are the valid time range in minutes. Also instead average you can use sum/timescale/median functions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/108484741-0cc69800-7294-11eb-956b-8dfb74123301.png#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;This post was originally posted in &lt;a href=&quot;https://github.com/yesoreyeram/grafana-infinity-datasource/discussions/38&quot;&gt;github discussion&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[Github]]></title><description><![CDATA[Github Stats image We can leverage Github graphql API to query the github stats using this infinity plugin graphql api. Sample Query given…]]></description><link>https://yesoreyeram.github.io/grafana-infinity-datasource/blog/github</link><guid isPermaLink="false">https://yesoreyeram.github.io/grafana-infinity-datasource/blog/github</guid><pubDate>Fri, 28 Jan 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Github Stats&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/93846498-1d9abf80-fc9c-11ea-90ed-4c569b088d99.png#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can leverage &lt;a href=&quot;https://docs.github.com/en/graphql&quot;&gt;Github graphql API&lt;/a&gt; to query the github stats using this infinity plugin graphql api.&lt;/p&gt;
&lt;p&gt;Sample Query given in the below example. You can customize your query to bring the stats you needed.&lt;/p&gt;
&lt;h2&gt;Query Editor&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/93736996-d3510a00-fbd9-11ea-8c05-065758d66e82.png#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/93737011-e1068f80-fbd9-11ea-8c82-ea516f83cf3d.png#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;Query Used:&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;graphql&quot; terminal=&quot;carbon&quot; theme=&quot;vscode&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;{
  repository(owner: &amp;quot;$GithubUser&amp;quot;, name: &amp;quot;$GithubRepo&amp;quot;) {
    issues(last: 20) {
      edges {
        node {
          author {
            login
          }
          state
          title
          url
        }
      }
    }
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;h2&gt;Datasource Configuration&lt;/h2&gt;
&lt;p&gt;Select &lt;strong&gt;Basic user authentication&lt;/strong&gt; mode and use your github username and PAT token as password&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/93736929-b1578780-fbd9-11ea-9413-5585ff79d3a8.png#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Github Organization Summary example&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/153843/93846498-1d9abf80-fc9c-11ea-90ed-4c569b088d99.png#center&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;corresponding query used is given below&lt;/p&gt;
&lt;deckgo-highlight-code language=&quot;graphql&quot; terminal=&quot;carbon&quot; theme=&quot;vscode&quot;  &gt;
          &lt;code slot=&quot;code&quot;&gt;{
  repositoryOwner(login: &amp;quot;$GithubUser&amp;quot;) {
    repositories(first: 100) {
      data: nodes {
        name
        stargazers {
          totalCount
        }
        openissues: issues(states: OPEN) {
          totalCount
        }
        openpr: pullRequests(states: OPEN) {
          totalCount
        }
      }
    }
  }
}&lt;/code&gt;
        &lt;/deckgo-highlight-code&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Queries are not paginated&lt;/li&gt;
&lt;li&gt;Github rate limits apply&lt;/li&gt;
&lt;li&gt;If you need paginated and full set of results, use grafana &lt;a href=&quot;https://grafana.com/grafana/plugins/grafana-github-datasource&quot;&gt;github stats plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Hello World]]></title><description><![CDATA[Hello world Hello world]]></description><link>https://yesoreyeram.github.io/grafana-infinity-datasource/blog/hello-world</link><guid isPermaLink="false">https://yesoreyeram.github.io/grafana-infinity-datasource/blog/hello-world</guid><pubDate>Mon, 03 Jan 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Hello world&lt;/h2&gt;
&lt;p&gt;Hello world&lt;/p&gt;</content:encoded></item></channel></rss>