{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/wiki/authentication/","result":{"data":{"site":{"siteMetadata":{"title":"Grafana Infinity Datasource","description":"Do infinite things with Grafana. Turn any website into beautiful grafana dashboards. Supports HTML, CSV, JSON, XML & GraphQL documents.","socialImage":"https://user-images.githubusercontent.com/153843/92741922-03491380-f377-11ea-9c31-9a744afd3388.png","website":"https://yesoreyeram.github.io/grafana-infinity-datasource"}},"markdownRemark":{"html":"<h2>Authentication</h2>\n<p>Infinity datasource supports following authentication methods</p>\n<ul>\n<li>No Authentication</li>\n<li>Basic authentication</li>\n<li>Bearer token authentication</li>\n<li>API Key authentication</li>\n<li>Digest authentication</li>\n<li>OAuth passthrough</li>\n<li>OAuth2 client credentials</li>\n<li>OAuth2 JWT authentication</li>\n<li>Azure authentication</li>\n<li>AWS authentication</li>\n</ul>\n<h2>No Authentication</h2>\n<p>If your APIs doesn't require any authentication, select <strong>No Authentication</strong> method.</p>\n<h2>Basic Authentication</h2>\n<p>Basic authentication sends a username and password with your request. In the request Headers, the Authorization header will be sent in the <code>Basic &#x3C;Base64 encoded username and password></code> format.</p>\n<h2>Bearer Token Authentication</h2>\n<p>Bearer token enable requests to authenticate using an access key, such as a JSON Web Token (JWT), personal access token. In the request Headers, the Authorization header will be sent in the <code>Bearer &#x3C;Your API key></code> format.</p>\n<blockquote>\n<p>If you need a custom prefix instead of Bearer prefix, use API Key authentication instead with the key of <strong>Authorization</strong>.</p>\n</blockquote>\n<h2>API Key Authentication</h2>\n<p>With API key authentication, you can send a key-value pair to the API via request header or query parameter. API Key authentication requires following parameters</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Key</td>\n<td>Key of the API token. This wll be key of the header or query parameter.</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>Value of the API token</td>\n</tr>\n<tr>\n<td>In</td>\n<td>Accepts <code>header</code>/<code>query</code>. Most APIs accept API keys via headers which is preferred way of sending api keys. Sending API keys via the query parameter is not suggested way.</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>Most often, users got confused with API key authentication with bearer token authentication. So just double check, you are using the correct auth mechanism.</p>\n</blockquote>\n<h2>Digest Authentication</h2>\n<p>Digest authentication enable requests to authenticate using <a href=\"https://www.rfc-editor.org/rfc/rfc7616.txt\">RFC7616 HTTP Digest Access Authentication protocol</a>.</p>\n<h2>OAuth Passthrough</h2>\n<p>If grafana user is already authenticated via OAuth, this authentication method will forward the oauth tokens to the API.</p>\n<h2>OAuth2 Client Credentials Authentication</h2>\n<p>OAuth2 Client credentials require the following parameters</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Client ID</td>\n<td>ClientID is the application's ID</td>\n</tr>\n<tr>\n<td>Client Secret</td>\n<td>ClientSecret is the application's secret.</td>\n</tr>\n<tr>\n<td>Token URL</td>\n<td>TokenURL is the resource server's token endpoint URL. This is a constant specific to each server.</td>\n</tr>\n<tr>\n<td>Scopes</td>\n<td>Scope specifies optional requested permissions.</td>\n</tr>\n<tr>\n<td>Endpoint params</td>\n<td>EndpointParams specifies additional parameters for requests to the token endpoint.</td>\n</tr>\n</tbody>\n</table>\n<h2>OAuth2 JWT Authentication</h2>\n<p>OAuth2 JWT require the following parameters</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Email</td>\n<td>Email is the OAuth client identifier used when communicating with the configured OAuth provider</td>\n</tr>\n<tr>\n<td>Private Key</td>\n<td>PrivateKey contains the contents of an RSA private key or the contents of a PEM file that contains a privatekey</td>\n</tr>\n<tr>\n<td>Private Key Identifier</td>\n<td>Optional. PrivateKeyID contains an optional hint indicating which key is being used</td>\n</tr>\n<tr>\n<td>Token URL</td>\n<td>TokenURL is the endpoint required to complete the 2-legged JWT flow</td>\n</tr>\n<tr>\n<td>Subject</td>\n<td>Optional. Subject is the optional user to impersonate</td>\n</tr>\n<tr>\n<td>Scopes</td>\n<td>Scopes optionally specifies a list of requested permission scopes. Provide scopes as a comma separated values</td>\n</tr>\n</tbody>\n</table>\n<h2>Azure Authentication</h2>\n<p>If you want to authenticate your API endpoints via microsoft azure authentication, refer steps given <a href=\"/grafana-infinity-datasource/wiki/azure-authentication\">here</a>.</p>\n<h2>AWS Authentication</h2>\n<p>If you want to authenticate your API endpoints via amazon aws authentication, refer steps given <a href=\"/grafana-infinity-datasource/wiki/aws-authentication\">here</a>.</p>","frontmatter":{"slug":"/wiki/authentication","title":"Authentication","previous_page_title":"Installation","previous_page_slug":"/wiki/installation","next_page_title":"Provisioning","next_page_slug":"/wiki/provisioning"}}},"pageContext":{"id":"1109df5f-998e-5285-b9db-4ac1de00fcde","frontmatter__slug":"/wiki/authentication","__params":{"frontmatter__slug":"wiki"}}},"staticQueryHashes":["561970757"]}