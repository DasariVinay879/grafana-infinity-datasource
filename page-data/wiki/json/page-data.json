{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/wiki/json/","result":{"data":{"site":{"siteMetadata":{"title":"Grafana Infinity Datasource","description":"Do infinite things with Grafana. Turn any website into beautiful grafana dashboards. Supports HTML, CSV, JSON, XML & GraphQL documents.","socialImage":"https://user-images.githubusercontent.com/153843/92741922-03491380-f377-11ea-9c31-9a744afd3388.png","website":"https://yesoreyeram.github.io/grafana-infinity-datasource"}},"markdownRemark":{"html":"<p><img src=\"https://user-images.githubusercontent.com/153843/189874914-6b49d3ec-2030-46ea-b14e-fdd48628345e.png#center\" alt=\"Sample JSON Query in Infinity datasource\"></p>\n<p>Select <strong>Type</strong> of the query to <code>JSON</code>. You can either specify the URL of the JSON API, JSON file or can provide inline CSV.</p>\n<h2>Using public JSON API endpoints</h2>\n<p>Below example shows about fetching data from a publicly accessible JSON URL/API endpoint.</p>\n<p>URL : <code>https://jsonplaceholder.typicode.com/users</code></p>\n<p><img src=\"https://user-images.githubusercontent.com/153843/108413678-34314c80-7223-11eb-9cce-603134ec2d48.png#center\" alt=\"image\"></p>\n<p>In the above example, the data in the URL is array. So no need to configure any additional fields except url in the panel.</p>\n<h2>Accessing nested properties of JSON data</h2>\n<p>URL : <code>https://thingspeak.com/channels/38629/feed.json</code></p>\n<p><img src=\"https://user-images.githubusercontent.com/153843/108415043-de5da400-7224-11eb-9295-d49fcc18464a.png#center\" alt=\"image\"></p>\n<p>In the above example, data is in the <code>feeds</code> property. So the same is specified as root / rows field. But still our plugin doesn't know anything about the fields or it's types. So we are going to add the columns to make it more meaningful.</p>\n<p>We are adding columns and defining their types as shown below.</p>\n<p><img src=\"https://user-images.githubusercontent.com/153843/108427049-7dd66300-7234-11eb-8d27-cec50945a66c.png#center\" alt=\"image\"></p>\n<h2>JSON Data without time field</h2>\n<p>URL : <code>https://gist.githubusercontent.com/yesoreyeram/2433ce69862f452b9d0460c947ee191f/raw/f8200a62b68a096792578efd5e3c72fdc5d99d98/population.json</code></p>\n<p><img src=\"https://user-images.githubusercontent.com/153843/108415716-cdf9f900-7225-11eb-8e0d-5d767104a080.png#center\" alt=\"image\"></p>\n<p>In the above example, we are visualizing a json data without time field. Our JSON has only two fields aka <code>country</code> and <code>population</code>. So we asked the plugin to add a dummy time field to the data so that we can visualize them in any of the grafana's stock panel. If you closely look at the image above, you can see we specified 'format' as <strong>timeseries</strong>.</p>\n<p>For reference, JSON data from the URL is given below</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">[\n  { &quot;country&quot;: &quot;india&quot;, &quot;population&quot;: 300 },\n  { &quot;country&quot;: &quot;usa&quot;, &quot;population&quot;: 200 },\n  { &quot;country&quot;: &quot;uk&quot;, &quot;population&quot;: 150 },\n  { &quot;country&quot;: &quot;china&quot;, &quot;population&quot;: 400 }\n]</code>\n        </deckgo-highlight-code>\n<h2>JSON Inline</h2>\n<p>Instead of specifying URL, you can hardcoded JSON object. For example, you can specify the json as shown in the below example</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">[\n  { &quot;country&quot;: &quot;india&quot;, &quot;population&quot;: 420 },\n  { &quot;country&quot;: &quot;india&quot;, &quot;population&quot;: 440 },\n  { &quot;country&quot;: &quot;usa&quot;, &quot;population&quot;: 200 },\n  { &quot;country&quot;: &quot;uk&quot;, &quot;population&quot;: 150 },\n  { &quot;country&quot;: &quot;china&quot;, &quot;population&quot;: 400 }\n]</code>\n        </deckgo-highlight-code>\n<p>You need to also specify the column names manually for display purposes.</p>\n<h2>JSONPath in root selector</h2>\n<p>In the root selector, you can use the selector in JSONPath format.</p>\n<p>Note: Any root selector that starts with $ will be considered as JSONPath selector</p>\n<p><img src=\"https://user-images.githubusercontent.com/153843/100856870-ddb63c80-3483-11eb-8e3c-791c161d3cc7.png#center\" alt=\"image\"></p>\n<p>Example:</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">{\n  &quot;customers&quot;: [\n    { &quot;name&quot;: &quot;mary&quot;, &quot;age&quot;: 22, &quot;gender&quot;: &quot;female&quot; },\n    { &quot;name&quot;: &quot;joseph&quot;, &quot;age&quot;: 41, &quot;gender&quot;: &quot;male&quot; }\n  ],\n  &quot;premium_customers&quot;: [{ &quot;name&quot;: &quot;john doe&quot;, &quot;age&quot;: 21, &quot;gender&quot;: &quot;male&quot; }]\n}</code>\n        </deckgo-highlight-code>\n<p>In the above json, if <code>$.premium_customers</code> is the root selector then only \"john doe\" will return. If <code>$.*</code> is the root selector all the three rows will be returned.</p>\n<h2>UQL Parser</h2>\n<p>If you are looking for more JSON options like group by, order by, JSONata, field manipulation etc, then <a href=\"/grafana-infinity-datasource/wiki/uql\">UQL</a> is the one you need. Following is the simple UQL command to parse</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| scope &quot;feeds&quot;\n| project &quot;ts&quot;=todatetime(&quot;created_at&quot;), &quot;Density of Westbound Cars&quot;=tonumber(&quot;field1&quot;), &quot;Density of Eastbound Cars&quot;=tonumber(&quot;field2&quot;)</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/153843/189878439-ec8266e3-cb16-4cbf-8718-2371a3a7276c.png#center\" alt=\"UQL Parser\"></p>\n<h2>Backend Parser</h2>\n<p>If you need advanced options such as alerting/recorded queries, then use <code>backend</code> as the parser.</p>\n<p><img src=\"https://user-images.githubusercontent.com/153843/189875668-3ac061a9-c548-4bfe-abcc-6d0d7e6bdb55.png#center\" alt=\"backend parser\"></p>\n<p>when using the <code>backend</code> as parsing option, your timestamp fields needs to be ISO datetime format. Example: <code>2006-01-02T15:04:05Z07:00</code>. If they are not in the ISO timestamp format, you can specify the format using layout option. The layout needs to be in <a href=\"https://www.geeksforgeeks.org/time-formatting-in-golang/\">golang time layout spec</a>.</p>\n<p>When using <code>backend</code> parser, you also have an option to summarize the numeric fields into a single aggregated number using Summarize field. Example usage: <code>last(density_of_eastbound_cars) - last(density_of_westbound_cars)</code>. You can also use numeric options such as <code>sum</code>,<code>min</code>,<code>max</code>,<code>mean</code>,<code>first</code> and <code>last</code>.</p>\n<p><img src=\"https://user-images.githubusercontent.com/153843/189877393-b7d83da7-0e1d-41cd-a003-814bb2963347.png#center\" alt=\"summarize option in backend parser\"></p>","frontmatter":{"slug":"/wiki/json","title":"JSON","previous_page_title":"UQL","previous_page_slug":"/wiki/uql","next_page_title":"CSV","next_page_slug":"/wiki/csv"}}},"pageContext":{"id":"94922e28-1b9e-5aa0-849c-b9cfe343e4d3","frontmatter__slug":"/wiki/json","__params":{"frontmatter__slug":"wiki"}}},"staticQueryHashes":["561970757"]}