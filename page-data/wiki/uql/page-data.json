{"componentChunkName":"component---src-pages-markdown-remark-frontmatter-slug-tsx","path":"/wiki/uql/","result":{"data":{"site":{"siteMetadata":{"title":"Grafana Infinity Datasource","description":"Do infinite things with Grafana. Turn any website into beautiful grafana dashboards. Supports HTML, CSV, JSON, XML & GraphQL documents.","socialImage":"https://user-images.githubusercontent.com/153843/92741922-03491380-f377-11ea-9c31-9a744afd3388.png","website":"https://yesoreyeram.github.io/grafana-infinity-datasource"}},"markdownRemark":{"html":"<h2>UQL</h2>\n<h3>click here for <a href=\"/grafana-infinity-datasource/uql-playground\">UQL playground</a></h3>\n<p>UQL (Unstructured query language) is advance query format in infinity datasource which will consolidate JSON, CSV, XML, GraphQL formats. UQL also provides ability to customize the results.</p>\n<p>UQL is an opinionated query language designed for in-memory operations. UQL query can be formed with list of commands joined by <code>|</code>, in a line each.\nMost of the times, fields are referred within double quotes and string values are referred with single quotes. UQL was inspired by kusto query language and follows similar syntax.</p>\n<blockquote>\n<p>UQL is still in <strong>beta</strong> but used widely. If you encounter any issues with uql, create a bug <a href=\"https://github.com/yesoreyeram/uql/issues/new\">here</a>.</p>\n</blockquote>\n<p>if your data looks like this,</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">[\n  {\n    &quot;id&quot;: 1,\n    &quot;name&quot;: { &quot;firstName&quot;: &quot;john&quot;, &quot;lastName&quot;: &quot;doe&quot; },\n    &quot;dob&quot;: &quot;1985-01-01&quot;,\n    &quot;city&quot;: &quot;chennai&quot;\n  },\n  {\n    &quot;id&quot;: 2,\n    &quot;name&quot;: { &quot;firstName&quot;: &quot;alice&quot;, &quot;lastName&quot;: &quot;bob&quot; },\n    &quot;dob&quot;: &quot;1990-12-31&quot;,\n    &quot;city&quot;: &quot;london&quot;\n  }\n]</code>\n        </deckgo-highlight-code>\n<p>then the following UQL query</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| extend &quot;full name&quot;=strcat(&quot;name.firstName&quot;,&#39; &#39;,&quot;name.lastName&quot;), &quot;dob&quot;=todatetime(&quot;dob&quot;)\n| project-away &quot;name&quot;\n| order by &quot;full name&quot; asc</code>\n        </deckgo-highlight-code>\n<p>will produce four column table (id, dob, city, full name).</p>\n<h3>Basic UQL commands</h3>\n<p>following are the basic UQL commands. All these commands are available in all the version unless specified.</p>\n<h3>project</h3>\n<p><code>project</code> command is used to select the columns to include in the results. If you want to select a property inside a nested object, you can use dot notation. Optionally, you can also alias the fields.</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| project &quot;id&quot;, &quot;name.firstName&quot;, &quot;date of birth&quot;=&quot;dob&quot;</code>\n        </deckgo-highlight-code>\n<h3>project-away</h3>\n<p><code>project-away</code> command is exactly opposite as <code>project</code>. It just drops specific columns from the data. It doesn't support alias or dot notation selector.</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| project-away &quot;id&quot;, &quot;city&quot;</code>\n        </deckgo-highlight-code>\n<h3>order by</h3>\n<p><code>order by</code> command sorts the input based on any column. sort direction should be either <code>asc</code> or <code>desc</code></p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| order by &quot;full name&quot; asc</code>\n        </deckgo-highlight-code>\n<h3>extend</h3>\n<p><code>extend</code> command is similar to <code>project</code>. but instead of selecting the columns, it just adds/replace columns in existing data. <code>extends</code> expects an alias and a function.</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| extend &quot;dob&quot;=todatetime(&quot;dob&quot;), &quot;city&quot;=toupper(&quot;city&quot;)</code>\n        </deckgo-highlight-code>\n<p>following are some of the available functions</p>\n<table>\n<thead>\n<tr>\n<th>function keyword</th>\n<th>syntax</th>\n<th>description</th>\n<th>available from</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>trim</td>\n<td>trim(\"name\")</td>\n<td>trims the string</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>trim_start</td>\n<td>trim_start(\"name\")</td>\n<td>removes the space before</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>trim_end</td>\n<td>trim_end(\"name\")</td>\n<td>removes the space after</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>tonumber</td>\n<td>tonumber(\"age\")</td>\n<td>converts a string into number</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>tostring</td>\n<td>tostring(\"age\")</td>\n<td>converts a number into string</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>todatetime</td>\n<td>todatetime(\"age\")</td>\n<td>converts a datetime string into datetime</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>unixtime_seconds_todatetime</td>\n<td>unixtime_seconds_todatetime(\"dob\")</td>\n<td>converts unix epoch s timestamp to datetime</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>unixtime_nanoseconds_todatetime</td>\n<td>unixtime_nanoseconds_todatetime(\"dob\")</td>\n<td>converts unix epoch ns timestamp to datetime</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>unixtime_milliseconds_todatetime</td>\n<td>unixtime_milliseconds_todatetime(\"dob\")</td>\n<td>converts unix epoch ms timestamp to datetime</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>unixtime_microseconds_todatetime</td>\n<td>unixtime_microseconds_todatetime(\"dob\")</td>\n<td>converts unix epoch microsecond timestamp to datetime</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>format_datetime</td>\n<td>format_datetime(\"dob\",'DD/MM/YYYY')</td>\n<td>converts datetime to a specific format</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>add_datetime</td>\n<td>add_datetime(\"dob\",'-1d')</td>\n<td>adds duration to a datetime field</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>startofminute</td>\n<td>startofminute(\"dob\")</td>\n<td>rounds the datetime field to the starting minute</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>startofhour</td>\n<td>startofhour(\"dob\")</td>\n<td>rounds the datetime field to the starting hour</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>startofday</td>\n<td>startofday(\"dob\")</td>\n<td>rounds the datetime field to the starting day</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>startofmonth</td>\n<td>startofmonth(\"dob\")</td>\n<td>rounds the datetime field to the starting month</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>startofweek</td>\n<td>startofweek(\"dob\")</td>\n<td>rounds the datetime field to the starting week</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>startofyear</td>\n<td>startofyear(\"dob\")</td>\n<td>rounds the datetime field to the starting year</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>extract</td>\n<td>extract('regex',index,\"col1\")</td>\n<td>extracts part of the string field using regex and match index (0/1/..)</td>\n<td>1.0.0</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>sum(\"col1\",\"col2\")</td>\n<td>sum of two or more columns</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>diff</td>\n<td>diff(\"col1\",\"col2\")</td>\n<td>difference between two columns</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>mul</td>\n<td>mul(\"col1\",\"col2\")</td>\n<td>multiplication of two columns</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>div</td>\n<td>div(\"col1\",\"col2\")</td>\n<td>division of two columns (col1/col2)</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>percentage</td>\n<td>percentage(\"col1\",\"col2\")</td>\n<td>percentage of two columns ((col1/col2)*100)</td>\n<td>1.0.0</td>\n</tr>\n<tr>\n<td>strcat</td>\n<td>strcat(\"col1\",\"col2\")</td>\n<td>concatenates two or more columns</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>split</td>\n<td>split(\"col1\",'delimiter')</td>\n<td>splits a string using delimiter</td>\n<td>1.0.0</td>\n</tr>\n<tr>\n<td>replace_string</td>\n<td>replace_string(\"col1\",'src','replacer')</td>\n<td>replace a portion of string with another</td>\n<td>1.0.0</td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>revers(\"col1\")</td>\n<td>reverse a string</td>\n<td>1.0.0</td>\n</tr>\n<tr>\n<td>floor</td>\n<td>floor(\"col1\")</td>\n<td>calculates the floor value of given numeric field</td>\n<td>0.8.7</td>\n</tr>\n<tr>\n<td>ceil</td>\n<td>ceil(\"col1\")</td>\n<td>calculates the ceil value of given numeric field</td>\n<td>0.8.7</td>\n</tr>\n<tr>\n<td>round</td>\n<td>round(\"col1\")</td>\n<td>calculates the round value of given numeric field</td>\n<td>0.8.7</td>\n</tr>\n<tr>\n<td>sign</td>\n<td>sign(\"col1\")</td>\n<td>calculates the sign value of given numeric field</td>\n<td>0.8.7</td>\n</tr>\n<tr>\n<td>pow</td>\n<td>pow(\"col1\",3)</td>\n<td>calculates the pow value of given numeric field</td>\n<td>0.8.7</td>\n</tr>\n<tr>\n<td>sin</td>\n<td>sin(\"col1\")</td>\n<td>calculates the sin value of given numeric field</td>\n<td>0.8.7</td>\n</tr>\n<tr>\n<td>cos</td>\n<td>cos(\"col1\")</td>\n<td>calculates the cos value of given numeric field</td>\n<td>0.8.7</td>\n</tr>\n<tr>\n<td>tan</td>\n<td>tan(\"col1\")</td>\n<td>calculates the tan value of given numeric field</td>\n<td>0.8.7</td>\n</tr>\n<tr>\n<td>log</td>\n<td>log(\"col1\")</td>\n<td>calculates the log value of given numeric field</td>\n<td>0.8.7</td>\n</tr>\n<tr>\n<td>log2</td>\n<td>log2(\"col1\")</td>\n<td>calculates the log2 value of given numeric field</td>\n<td>0.8.7</td>\n</tr>\n<tr>\n<td>log10</td>\n<td>log10(\"col1\")</td>\n<td>calculates the log10 value of given numeric field</td>\n<td>0.8.7</td>\n</tr>\n<tr>\n<td>parse_url</td>\n<td>parse_url(\"col1\")</td>\n<td>parses the col1 as URL</td>\n<td>0.8.6</td>\n</tr>\n<tr>\n<td></td>\n<td>parse_url(\"col1\",'pathname')</td>\n<td>returns the <code>pathname</code> of the URL. Options are <code>host</code>,<code>hash</code>,<code>origin</code>,<code>href</code>,<code>protocol</code> and <code>search</code></td>\n<td>0.8.6</td>\n</tr>\n<tr>\n<td></td>\n<td>parse_url(\"col1\",'search','key1')</td>\n<td>returns the query string value for <code>key1</code>. 2nd arg is always <code>search</code></td>\n<td>0.8.6</td>\n</tr>\n<tr>\n<td>atob</td>\n<td>atob(\"col1\")</td>\n<td>returns <code>atob</code> value of a string column. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/atob\">reference</a></td>\n<td>1.3.0</td>\n</tr>\n<tr>\n<td>btoa</td>\n<td>btoa(\"col1\")</td>\n<td>returns <code>btoa</code> value of a string column. <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/btoa\">reference</a></td>\n<td>1.3.0</td>\n</tr>\n<tr>\n<td>substring</td>\n<td>substring(\"col1\",1,5)</td>\n<td>returns <code>substring</code> value of a string column. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring\">reference</a></td>\n<td>1.3.0</td>\n</tr>\n</tbody>\n</table>\n<p>For example, the data <code>[ { \"a\": 12, \"b\" : 20 }, { \"a\" : 6, \"b\": 32} ]</code> and the following uql query</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| project &quot;a&quot;, &quot;triple&quot;=sum(&quot;a&quot;,&quot;a&quot;,&quot;a&quot;),&quot;thrice&quot;=mul(&quot;a&quot;,3), sum(&quot;a&quot;,&quot;b&quot;),  diff(&quot;a&quot;,&quot;b&quot;), mul(&quot;a&quot;,&quot;b&quot;)</code>\n        </deckgo-highlight-code>\n<p>wil produce the following output</p>\n<table>\n<thead>\n<tr>\n<th>a</th>\n<th>triple</th>\n<th>thrice</th>\n<th>sum</th>\n<th>diff</th>\n<th>mul</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>12</td>\n<td>36</td>\n<td>36</td>\n<td>32</td>\n<td>-8</td>\n<td>240</td>\n</tr>\n<tr>\n<td>6</td>\n<td>18</td>\n<td>18</td>\n<td>38</td>\n<td>-26</td>\n<td>192</td>\n</tr>\n</tbody>\n</table>\n<p>To apply multiple transformations over a field, repeat them with the same field name. For example, the uql query <code>extend \"name\"=tolower(\"name\"), \"name\"=trim(\"name\")</code> will apply tolower function and then trim function over the name field.</p>\n<p>There are few other extend/project methods also available to deal with array</p>\n<h4>pack</h4>\n<p>pack method converts array of key value pairs into a map. Example <code>extend \"foo\"=pack('key1',\"value1\",'key1',\"value2\")</code> will yield a object <code>{key1:value1,key2:value2}</code></p>\n<h4>array_from_entries</h4>\n<p>array_from_entries method builds an array of objects from entries. Example <code>extend \"foo\"=array_from_entries('timestamp',[2010,2020,2030])</code> will yield an array <code>[{timestamp:2010},{timestamp:2020},{timestamp:2030}]</code></p>\n<h4>array_to_map</h4>\n<p>array_to_map converts an array of entries to a map. Optionally, one can provide alias for keys instead of index. Example <code>extend \"foo\"=array_to_map(['chennai','india'],'city','country')</code> will yield <code>{ 'city': 'chennai', 'country':'india'}</code></p>\n<h3>summarize</h3>\n<p><code>summarize</code> command aggregates the data by a string column. summarize command expects alias, summarize by fields and summarize function. Following are the valid summarize functions.</p>\n<table>\n<thead>\n<tr>\n<th>function keyword</th>\n<th>syntax</th>\n<th>description</th>\n<th>available from</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>count</td>\n<td>count()</td>\n<td>count of values</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>sum(\"age\")</td>\n<td>sum of age</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>min</td>\n<td>min(\"population\")</td>\n<td>min of population</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>max</td>\n<td>max(\"foo\")</td>\n<td>max of foo</td>\n<td>0.8.0</td>\n</tr>\n<tr>\n<td>mean</td>\n<td>mean(\"foo\")</td>\n<td>mean of foo</td>\n<td>0.8.0</td>\n</tr>\n</tbody>\n</table>\n<p>For example, the following data</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">[\n  { &quot;city&quot;: &quot;tokyo&quot;, &quot;country&quot;: &quot;japan&quot;, &quot;population&quot;: 200 },\n  { &quot;city&quot;: &quot;newyork&quot;, &quot;country&quot;: &quot;usa&quot;, &quot;population&quot;: 60 },\n  { &quot;city&quot;: &quot;oslo&quot;, &quot;country&quot;: &quot;usa&quot;, &quot;population&quot;: 40 },\n  { &quot;city&quot;: &quot;new delhi&quot;, &quot;country&quot;: &quot;india&quot;, &quot;population&quot;: 180 },\n  { &quot;city&quot;: &quot;mumbai&quot;, &quot;country&quot;: &quot;india&quot;, &quot;population&quot;: 150 }\n]</code>\n        </deckgo-highlight-code>\n<p>and the following uql query</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| summarize &quot;number of cities&quot;=count(), &quot;total population&quot;=sum(&quot;population&quot;) by &quot;country&quot;\n| extend &quot;country&quot;=toupper(&quot;country&quot;)\n| order by &quot;total population&quot; desc</code>\n        </deckgo-highlight-code>\n<p>will produce the output table like this</p>\n<table>\n<thead>\n<tr>\n<th>country</th>\n<th>number of cities</th>\n<th>total population</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>INDIA</td>\n<td>2</td>\n<td>330</td>\n</tr>\n<tr>\n<td>JAPAN</td>\n<td>1</td>\n<td>200</td>\n</tr>\n<tr>\n<td>USA</td>\n<td>2</td>\n<td>100</td>\n</tr>\n</tbody>\n</table>\n<h3>pivot</h3>\n<p><code>pivot</code> is the command used to perform pivot operations over the data. <code>pivot</code> command accepts 3 arguments.</p>\n<ul>\n<li>1st argument is the summarization. Example: <code>count(\"id)</code> or <code>sum(\"salary\")</code></li>\n<li>2nd argument is the row field name. Example: <code>\"country\"</code></li>\n<li>3rd argument is the column field name. Example: <code>\"occupation\"</code></li>\n</ul>\n<h4>Pivot example 1</h4>\n<deckgo-highlight-code language=\"csv\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">name,age,country,occupation,salary\nLeanne Graham,38,USA,Devops Engineer,3000\nErvin Howell,27,USA,Software Engineer,2300\nClementine Bauch,17,Canada,Student,\nPatricia Lebsack,42,UK,Software Engineer,2800\nLeanne Bell,38,USA,Senior Software Engineer,4000\nChelsey Dietrich,32,USA,Software Engineer,3500</code>\n        </deckgo-highlight-code>\n<p>and the following query</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-csv\n| extend &quot;salary&quot;=tonumber(&quot;salary&quot;)\n| pivot sum(&quot;salary&quot;), &quot;country&quot;, &quot;occupation&quot;</code>\n        </deckgo-highlight-code>\n<p>will produce</p>\n<table>\n<thead>\n<tr>\n<th>country</th>\n<th>Devops Engineer</th>\n<th>Software Engineer</th>\n<th>Student</th>\n<th>Senior Software Engineer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>USA</td>\n<td>3000</td>\n<td>5800</td>\n<td>0</td>\n<td>4000</td>\n</tr>\n<tr>\n<td>CANADA</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>UK</td>\n<td>0</td>\n<td>2800</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>where as the following summarize query</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-csv\n| extend &quot;salary&quot;=tonumber(&quot;salary&quot;)\n| summarize &quot;salary&quot;=sum(&quot;salary&quot;) by &quot;country&quot;, &quot;occupation&quot;</code>\n        </deckgo-highlight-code>\n<p>will produce</p>\n<table>\n<thead>\n<tr>\n<th>country</th>\n<th>occupation</th>\n<th>salary</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>USA</td>\n<td>Devops Engineer</td>\n<td>3000</td>\n</tr>\n<tr>\n<td>USA</td>\n<td>Software Engineer</td>\n<td>5800</td>\n</tr>\n<tr>\n<td>Canada</td>\n<td>Student</td>\n<td>0</td>\n</tr>\n<tr>\n<td>UK</td>\n<td>Software Engineer</td>\n<td>2800</td>\n</tr>\n<tr>\n<td>UK</td>\n<td>Senior Software Engineer</td>\n<td>4000</td>\n</tr>\n</tbody>\n</table>\n<p>so choose either <code>summarize</code> or <code>pivot</code> according to you needs</p>\n<h3>parse-json</h3>\n<p><code>parse-json</code> is the command to instruct the UQL to parse the response as JSON</p>\n<h3>parse-csv</h3>\n<p><code>parse-csv</code> is the command to instruct the UQL to parse the response as CSV</p>\n<h3>parse-xml</h3>\n<p><code>parse-xml</code> is the command to instruct the UQL to parse the response as XML</p>\n<h3>parse-yaml</h3>\n<p><code>parse-yaml</code> is used to specify that the results are in xml format</p>\n<h3>count</h3>\n<p>count gives the number of results.</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| count</code>\n        </deckgo-highlight-code>\n<h3>limit</h3>\n<p><code>limit</code> command restricts the number of results returned. For example, below query returns only 10 results</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| limit 10</code>\n        </deckgo-highlight-code>\n<h3>scope</h3>\n<p><code>scope</code> commands sets the context of the output data. It is useful when the results are insides nested json object.</p>\n<p>example</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">{\n  &quot;meta&quot;: { &quot;last-updated&quot;: &quot;2021-08-09&quot; },\n  &quot;count&quot;: 2,\n  &quot;users&quot;: [{ &quot;name&quot;: &quot;foo&quot; }, { &quot;name&quot;: &quot;bar&quot; }]\n}</code>\n        </deckgo-highlight-code>\n<p>and the following uql query just results the \"users\" and ignores the other root level properties.</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| scope &quot;users&quot;</code>\n        </deckgo-highlight-code>\n<h3>mv-expand</h3>\n<p><code>mv-expand</code> expands multi-value properties into their own records. For example, the command <code>mv-expand \"user\"=\"users\"</code> over following data</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">[\n  { &quot;group&quot;: &quot;A&quot;, &quot;users&quot;: [&quot;user a1&quot;, &quot;user a2&quot;] },\n  { &quot;group&quot;: &quot;B&quot;, &quot;users&quot;: [&quot;user b1&quot;] }\n]</code>\n        </deckgo-highlight-code>\n<p>will produce results like</p>\n<deckgo-highlight-code language=\"json\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">[\n  { &quot;group&quot;: &quot;A&quot;, &quot;user&quot;: &quot;user a1&quot; },\n  { &quot;group&quot;: &quot;A&quot;, &quot;user&quot;: &quot;user a2&quot; },\n  { &quot;group&quot;: &quot;B&quot;, &quot;user&quot;: &quot;user b1&quot; }\n]</code>\n        </deckgo-highlight-code>\n<p><code>mv-expand</code> should also work for non string arrays.</p>\n<h3>project kv()</h3>\n<p><code>project kv()</code> command is used to convert the given object into key-value pairs.</p>\n<p>Example: For the data <code>{ \"a\": {\"name\":\"a1\"}, \"b\": {\"name\":\"b1\"}, \"c\": {\"name\":\"c1\"} }</code> and the query <code>parse-json | project kv()</code> will yield the following table</p>\n<table>\n<thead>\n<tr>\n<th>key</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a</td>\n<td>{\"name\":\"a1\"}</td>\n</tr>\n<tr>\n<td>b</td>\n<td>{\"name\":\"b1\"}</td>\n</tr>\n<tr>\n<td>c</td>\n<td>{\"name\":\"c1\"}</td>\n</tr>\n</tbody>\n</table>\n<p>this command can be also used with arguments</p>\n<p>Example: For the data <code>{ \"data\": { \"a\": {\"name\":\"a1\"}, \"b\": {\"name\":\"b1\"}, \"c\": {\"name\":\"c1\"} } }</code> and the query <code>parse-json | project kv(\"data\")</code> will yield the same results</p>\n<blockquote>\n<p>project kv() command is available only from 0.8.7 of the plugin</p>\n</blockquote>\n<h3>JSONata</h3>\n<p><code>jsonata</code> command accepts a JSONata query and apply over the previous input</p>\n<deckgo-highlight-code language=\"sql\" terminal=\"carbon\" theme=\"vscode\"  >\n          <code slot=\"code\">parse-json\n| scope &quot;library&quot;\n| jsonata &quot;library.loans@$L.books@$B[$L.isbn=$B.isbn].customers[$L.customer=id].{ &#39;customer&#39;: name, &#39;book&#39;: $B.title, &#39;due&#39;: $L.return}&quot;\n| count</code>\n        </deckgo-highlight-code>\n<p>Like any other command, <code>jsonata</code> command can be combined/piped with multiple commands. You can use JSONata for filtering the data as well.</p>\n<blockquote>\n<p>JSONata support is available from 0.8.8 version</p>\n</blockquote>\n<h3>comments</h3>\n<p>Any new line that starts with <code>#</code> will be treated as comment.</p>","frontmatter":{"slug":"/wiki/uql","title":"UQL","previous_page_title":"Configuration","previous_page_slug":"/wiki/configuration","next_page_title":"JSON","next_page_slug":"/wiki/json"}}},"pageContext":{"id":"59536d80-1d00-5a84-bbb8-23a19cda017c","frontmatter__slug":"/wiki/uql","__params":{"frontmatter__slug":"wiki"}}},"staticQueryHashes":["561970757"]}